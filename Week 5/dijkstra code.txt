import heapq

def dijkstra(graph, start, goal):
    # Inisialisasi heap priority queue dan jarak
    queue = [(0, start, [])]
    visited = set()
    min_distances = {start: 0}
    
    while queue:
        # Ambil node dengan biaya terendah
        (cost, node, path) = heapq.heappop(queue)
        
        # Jika node telah dikunjungi, lewati
        if node in visited:
            continue
        
        # Tambahkan node ke jalur
        path = path + [node]
        
        # Jika mencapai tujuan, kembalikan jalur dan biaya total
        if node == goal:
            return path, cost
        
        # Tandai node sebagai dikunjungi
        visited.add(node)
        
        # Periksa tetangga node saat ini
        for neighbor, weight in graph.get(node, {}).items():
            if neighbor in visited:
                continue
            
            new_cost = cost + weight
            # Jika menemukan jalur yang lebih pendek, masukkan ke queue
            if new_cost < min_distances.get(neighbor, float('inf')):
                min_distances[neighbor] = new_cost
                heapq.heappush(queue, (new_cost, neighbor, path))
    
    return None, float('inf')  # Jika tidak ada jalur yang ditemukan

# Contoh penggunaan
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

start = 'A'
goal = 'D'
path, cost = dijkstra(graph, start, goal)

if path:
    print(f"Jalur terpendek dari {start} ke {goal}: {' -> '.join(path)}")
    print(f"Biaya total: {cost}")
else:
    print(f"Tidak ada jalur dari {start} ke {goal}")
